# -*- coding: utf-8 -*-
"""dashboardPA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DKZNdMQzBc6BfQeXmiQdOMZCB5_Z3Lqr
"""

pip install streamlit

import pandas as pd
import streamlit as st
import plotly.express as px

st.set_page_config(page_title="Datos Aseguradora") # Nombre para configurar la pagina web
st.header('Datos clientes aseguradora') #Va a ser el titulo de la pagina
st.subheader('Que informacion se puede obtener de cada clente') #Subtitulo

excel_file = 'fraudes_con_na.xlsx' #Nombre archivo a importar  'xlsx' hace referencia a excel

from google.colab import drive
drive.mount('/content/drive')

file_name='/content/drive/MyDrive/fraudes_con_na.xlsx'

sheet_name = 'BD' #la hoja de excel que voy a importar

df = pd.read_excel(file_name, #importo el archivo excel
                   sheet_name = sheet_name, #le digo cual hoja necesito
                   usecols = 'A:I', #aqui traigo las columnas que quiero usar
                   header =0) #desde que fila debe empezar a tomarme la informacion *Empieza a contar desde 0*

df['año'] = df['fecha_reclamo'].dt.year
df['mes'] = df['fecha_reclamo'].dt.month
df['dia'] = df['fecha_reclamo'].dt.day

df

df_personas = df.groupby(['genero'], as_index = False)['edad'].count() #hago un tipo de TABLA DINAMICA para agrupar los datos de una mejor manera, lo que hago aqui es que por cada EPS, me cuente la cantidad de personas encuestadas***

df_personas2 = df_personas #la guardo en otro dataframe (NO ES NECESARIO)


st.dataframe(df) #de esta forma nos va a mostrar el dataframe en Streamlit
st.write(df_personas2) #este nos sirve cuando no tenemos dataframe sino object****

#Crear un grafico de torta (pie chart)

pie_chart = px.pie(df_personas2, #tomo el dataframe2
                   title = 'Total Personas por genero', #El titulo
                   values = 'edad',##columna
                   names = 'genero') ## para verlo por EPS --> Colores

st.plotly_chart(pie_chart) # de esta forma se va a mostrar el dataframe en Streamlit

#Crear una lista con los parametros de una columna

estado = df['estado_civil'].unique().tolist() # se crea una lista unica de la columna CIUDAD
marca = df['marca_auto'].unique().tolist() # se crea una lista unica de la columna CALIFICACION
edad = df['edad'].unique().tolist() # se crea una lista unica de la columna EDAD PERSONA ENCUESTADA

#Crear un slider de edad

edad_selector = st.slider('Edad persona encuestada:',
                          min_value = min(edad), #el valor minimo va a ser el valor mas pequeño que encuentre dentro de la columna EDAD PERSONA ENCUESTADA
                          max_value = max(edad),#el valor maximo va a ser el valor mas grande que encuentre dentro de la columna EDAD PERSONA ENCUESTADA
                          value = (min(edad),max(edad))) #que tome desde el minimo, hasta el maximo

#crear multiselectores

estado_selector = st.multiselect('Estado civil:',
                                 estado,
                                 default = estado)

marca_selector = st.multiselect('Marca del auto:',
                                       marca,
                                       default = marca)

#Ahora necesito que esos selectores y slider me filtren la informacion

mask = (df['edad'].between(*edad_selector))&(df['marca_auto'].isin(marca_selector))&(df['estado_civil'].isin(estado_selector))

numero_resultados = df[mask].shape[0] ##number of availables rows
st.markdown(f'*Resultados Disponibles:{numero_resultados}*') ## sale como un titulo que dice cuantos resultados tiene para ese filtro

#una nueva agrupacion

df_agrupado = df[mask].groupby(by=['marca_auto']).count()[['edad']] #que me agrupe por CALIFICACION y me cuente por los datos de  EDAD PERSONA ENCUESTADA
df_agrupado =df_agrupado.rename(columns={'edad': 'cantidad'})
df_agrupado =df_agrupado.reset_index()

#Crear un gráfico de barras

bar_chart = px.bar(df_agrupado,
                   x='marca_auto',
                   y='cantidad',
                   text ='cantidad',
                   color_discrete_sequence = ['#f5b632']*len(df_agrupado),
                   template = 'plotly_white')

st.plotly_chart(bar_chart) #mostrar el grafico de barras en streamlit
